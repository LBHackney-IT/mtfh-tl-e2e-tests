version: 2.1

orbs:
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  aws-cli: circleci/aws-cli@2.0.3
  cypress: cypress-io/cypress@1
  browsers-chrome78-ff70:
    docker:
      - image: cypress/browsers:node14.16.0-chrome89-ff86

parameters:
  run_workflow_ci:
    description: The default behaviour of the pipeline when a commit and/or merge is performed.
    default: true
    type: boolean

  upstream_pipeline_name:
    description: The name of the mfe that triggered the tests upstream.
    default: ""
    type: string

  external_trigger:
    description: Pipeline triggered externally
    default: false
    type: boolean

  development_environment:
    default: false
    type: boolean

  staging_environment:
    default: false
    type: boolean

  production_environment:
    default: false
    type: boolean

references:
    workspace_root: &workspace_root '~'
    attach_workspace: &attach_workspace
        attach_workspace:
            at: *workspace_root

executors:
    docker-python:
        docker:
            - image: circleci/python:3.7

commands:
    assume-role-and-persist-workspace:
        description: 'Assume deployment role and persist credentials across jobs'
        parameters:
            aws-account:
                type: string
        steps:
            - checkout
            - aws_assume_role/assume_role:
                  account: <<parameters.aws-account>>
                  profile_name: default
                  role: 'LBH_Circle_CI_Deployment_Role'
            - persist_to_workspace:
                  root: *workspace_root
                  paths:
                      - .aws

jobs:
  assume-role-development:
        executor: docker-python
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_DEVELOPMENT

  assume-role-staging:
        executor: docker-python
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
        executor: docker-python
        steps:
            - assume-role-and-persist-workspace:
                  aws-account: $AWS_ACCOUNT_PRODUCTION

  run-e2e-tests:
        docker:
          - image: cypress/browsers:node14.16.0-chrome89-ff86
            environment:
              TERM: xterm
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
          - when:
              condition: << pipeline.parameters.external_trigger >> 
              steps:
                - *attach_workspace
                - aws-cli/install
                - checkout
                - run:
                    name: Execute e2e tests
                    command: |
                              echo "Upstream pipeline = << pipeline.parameters.upstream_pipeline_name >>"
                              export UPSTREAM_PIPELINE="$(echo << pipeline.parameters.upstream_pipeline_name >> | sed 's,https://github.com/LBHackney-IT/mtfh-frontend-,,g')"
                              export FEATURE_TOGGLE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_ASSET_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/property-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_CONTACT_DETAILS_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_PERSON_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/person-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_TENURE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_ENVIRONMENT=<<parameters.stage>> ;
                              export CYPRESS_AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile default) ;
                              export CYPRESS_AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile default) ;
                              echo "Running against $CYPRESS_ENVIRONMENT environment" ;
                              npm install ;
                              npm run test:cypress:$CYPRESS_ENVIRONMENT:$UPSTREAM_PIPELINE ;
                - run:
                    name: trigger downstream deployment
                    command: |
                              export UPSTREAM_PIPELINE="$(echo << pipeline.parameters.upstream_pipeline_name >> | sed 's,https://github.com/,,g')"
                              case << parameters.stage >> in
                              (development) export DEPLOYMENT_ENVIRONMENT='run_staging_workflow' ;;
                              esac
                              case << parameters.stage >> in
                              (staging) export DEPLOYMENT_ENVIRONMENT='run_production_workflow' ;;
                              esac
                              curl --location --request POST 'https://circleci.com/api/v2/project/gh/'"$UPSTREAM_PIPELINE"'/pipeline' \
                              --header 'Circle-Token: '"$CIRCLE_TOKEN"'' \
                              --header 'Content-Type: application/json' \
                              --data '{ "branch": "main", "parameters": { "run_development_workflow": false, '\""$DEPLOYMENT_ENVIRONMENT"\"': true } }' ;
                    when: on_success
                - run:
                    name: trigger failure message to parent pipeline
                    command: |
                              export UPSTREAM_PIPELINE="$(echo << pipeline.parameters.upstream_pipeline_name >> | sed 's,https://github.com/,,g')"
                              curl --location --request POST 'https://circleci.com/api/v2/project/gh/'"$UPSTREAM_PIPELINE"'/pipeline' \
                              --header 'Circle-Token: '"$CIRCLE_TOKEN"'' \
                              --header 'Content-Type: application/json' \
                              --data '{ "branch": "main", "parameters": { "run_development_workflow": false, "e2e_test_failure": true } }' ;
                    when: on_fail

  run-ci-tests:
        docker:
          - image: cypress/browsers:node14.16.0-chrome89-ff86
            environment:
              TERM: xterm
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
          - when:
              condition: << pipeline.parameters.run_workflow_ci >> 
              steps:
                - *attach_workspace
                - aws-cli/install
                - checkout
                - run:
                    name: Execute e2e tests
                    command: |
                              export FEATURE_TOGGLE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_ASSET_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/property-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_CONTACT_DETAILS_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_PERSON_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/person-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_TENURE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text) ;
                              export CYPRESS_ENVIRONMENT=<<parameters.stage>> ;
                              export CYPRESS_AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile default) ;
                              export CYPRESS_AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile default) ;
                              echo "Running against $CYPRESS_ENVIRONMENT environment" ;
                              npm install ;
                              npm run test:cypress:$CYPRESS_ENVIRONMENT ;
  run-e2e-devices:
        docker:
          - image: cypress/browsers:node14.16.0-chrome89-ff86
            environment:
              TERM: xterm
        environment:
            aws-region: eu-west-2
        parameters:
            stage:
                type: string
        steps:
          - *attach_workspace
          - aws-cli/install
          - checkout
          - run:
              name: Execute e2e tests
              command: |
                        export FEATURE_TOGGLE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text) ;
                        export CYPRESS_ASSET_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/property-api-url --query Parameter.Value --output text) ;
                        export CYPRESS_CONTACT_DETAILS_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text) ;
                        export CYPRESS_PERSON_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/person-api-url --query Parameter.Value --output text) ;
                        export CYPRESS_TENURE_ENDPOINT=$(aws ssm get-parameter --name /housing-tl/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text) ;
                        export CYPRESS_ENVIRONMENT=<<parameters.stage>> ;
                        export CYPRESS_AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile default) ;
                        export CYPRESS_AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile default) ;
                        echo "Running against $CYPRESS_ENVIRONMENT environment" ;
                        npm install ;
                        npm run test:cypress:$CYPRESS_ENVIRONMENT:devices ;
workflows:
  run-ci-tests:
    when: << pipeline.parameters.run_workflow_ci >>
    jobs:
      - assume-role-development:
          context: api-assume-role-housing-development-context
      - run-ci-tests:
          stage: development
          requires:
            - assume-role-development

  e2e-tests-development-<<pipeline.parameters.upstream_pipeline_namer>>:
    when:
      and:
        - equal: [ << pipeline.parameters.external_trigger >> ]
        - and: [ << pipeline.parameters.development_environment >> ]
    jobs:
      - assume-role-development:
          context: api-assume-role-housing-development-context
      - run-e2e-tests:
          stage: development
          requires:
            - assume-role-development
          
  e2e-tests-staging-<<pipeline.parameters.upstream_pipeline_name>>:
    when:
      and:
        - equal: [ << pipeline.parameters.external_trigger >> ]
        - and: [ << pipeline.parameters.staging_environment >> ]
    jobs:
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
      - run-e2e-tests:
          stage: staging
          requires:
            - assume-role-staging
      
  e2e-tests-production-<<pipeline.parameters.upstream_pipeline_name>>:
    when:
      and:
        - equal: [ << pipeline.parameters.external_trigger >> ]
        - and: [ << pipeline.parameters.production_environment >> ]
    jobs:
      - assume-role-production:
          context: api-assume-role-housing-production-context
      - run-e2e-tests:
          stage: production
          requires: 
            - assume-role-production

  e2e-tests-devices:
    triggers:
      - schedule:
          cron: "0 0 * * 2"
          filters:
            branches:
              only:
                - master
    jobs:
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
      - run-e2e-devices:
          stage: staging
          requires:
            - assume-role-staging
